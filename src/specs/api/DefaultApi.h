/**
* Simple API
* A simple API to demonstrate OpenAPI to C++ stub generation.
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * DefaultApi.h
 *
 * 
 */

#ifndef DefaultApi_H_
#define DefaultApi_H_


#include "ApiBase.h"

#include <pistache/http.h>
#include <pistache/router.h>
#include <pistache/http_headers.h>

#include <optional>
#include <utility>

#include "ItemIdArray.h"
#include "StatList.h"
#include "StatOperation.h"
#include "TagAttr.h"
#include "_test_get_get_200_response.h"

namespace org::openapitools::server::api
{

class  DefaultApi : public ApiBase {
public:
    explicit DefaultApi(const std::shared_ptr<Pistache::Rest::Router>& rtr);
    ~DefaultApi() override = default;
    void init() override;

    static const std::string base;

protected:
    void setupRoutes();

    void auth_counter_post_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void auth_setcounter_post_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void public_counter_post_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void public_counters_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void test_get_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void test_setcounter_post_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void default_api_default_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);

    /// <summary>
    /// Helper function to handle unexpected Exceptions during Parameter parsing and validation.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual void handleParsingException(const std::exception& ex, Pistache::Http::ResponseWriter &response) const noexcept;

    /// <summary>
    /// Helper function to handle unexpected Exceptions during Parameter parsing and validation.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual std::pair<Pistache::Http::Code, std::string> handleParsingException(const std::exception& ex) const noexcept;

    /// <summary>
    /// Helper function to handle unexpected Exceptions during processing of the request in handler functions.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual void handleOperationException(const std::exception& ex, Pistache::Http::ResponseWriter &response) const noexcept;

    /// <summary>
    /// Helper function to handle unexpected Exceptions during processing of the request in handler functions.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual std::pair<Pistache::Http::Code, std::string> handleOperationException(const std::exception& ex) const noexcept;

    /// <summary>
    /// Create counters having IDs from ItemIdArray.
    /// </summary>
    /// <remarks>
    /// This auth API creates a new counter set.
    /// </remarks>
    /// <param name="itemIdArray">Counter data.</param>
    virtual void auth_counter_post(const org::openapitools::server::model::ItemIdArray &itemIdArray, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Change counters for an itemKey
    /// </summary>
    /// <remarks>
    /// This auth API changes counters owned by itemKey.
    /// </remarks>
    /// <param name="statOperation">Stat operation</param>
    virtual void auth_setcounter_post(const org::openapitools::server::model::StatOperation &statOperation, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Get counters for an itemId
    /// </summary>
    /// <remarks>
    /// This public API sends list of itemIds to get counters for the itemId owner
    /// </remarks>
    /// <param name="itemIdArray">Array of itemIds to retrieve counters</param>
    virtual void public_counter_post(const org::openapitools::server::model::ItemIdArray &itemIdArray, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Get default set of counters.
    /// </summary>
    /// <remarks>
    /// This public API gets list of default stat counters.
    /// </remarks>
    virtual void public_counters_get(Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// A test get API.
    /// </summary>
    /// <remarks>
    /// Test API to get something.
    /// </remarks>
    virtual void test_get_get(Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Set a counter with initial values.
    /// </summary>
    /// <remarks>
    /// This auth API create a new counter set.
    /// </remarks>
    /// <param name="tagAttr">Counter data.</param>
    virtual void test_setcounter_post(const org::openapitools::server::model::TagAttr &tagAttr, Pistache::Http::ResponseWriter &response) = 0;

};

} // namespace org::openapitools::server::api

#endif /* DefaultApi_H_ */

