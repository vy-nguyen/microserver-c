/**
* Simple API
* A simple API to demonstrate OpenAPI to C++ stub generation.
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "StatOperation.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

StatOperation::StatOperation()
{
    
}

void StatOperation::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool StatOperation::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool StatOperation::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "StatOperation" : pathPrefix;

        
    if (!m_ItemKey.validate(msg, _pathPrefix + ".itemKey")) {
        msg << _pathPrefix << ": ItemKey is invalid;";
        success = false;
    }    
    if (!m_Signature.validate(msg, _pathPrefix + ".signature")) {
        msg << _pathPrefix << ": Signature is invalid;";
        success = false;
    }     
    
    /* Values */ {
        const std::vector<org::openapitools::server::model::StatElement>& value = m_Values;
        const std::string currentValuePath = _pathPrefix + ".values";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::StatElement& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".values") && success;
 
                i++;
            }
        }

    }
    
    return success;
}

bool StatOperation::operator==(const StatOperation& rhs) const
{
    return
    
    
    (getItemKey() == rhs.getItemKey())
     &&
    
    (getSignature() == rhs.getSignature())
     &&
    
    (getValues() == rhs.getValues())
    
    
    ;
}

bool StatOperation::operator!=(const StatOperation& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const StatOperation& o)
{
    j = nlohmann::json::object();
    j["itemKey"] = o.m_ItemKey;
    j["signature"] = o.m_Signature;
    j["values"] = o.m_Values;
    
}

void from_json(const nlohmann::json& j, StatOperation& o)
{
    j.at("itemKey").get_to(o.m_ItemKey);
    j.at("signature").get_to(o.m_Signature);
    j.at("values").get_to(o.m_Values);
    
}

org::openapitools::server::model::ItemKey StatOperation::getItemKey() const
{
    return m_ItemKey;
}
void StatOperation::setItemKey(org::openapitools::server::model::ItemKey const& value)
{
    m_ItemKey = value;
}
org::openapitools::server::model::Signature StatOperation::getSignature() const
{
    return m_Signature;
}
void StatOperation::setSignature(org::openapitools::server::model::Signature const& value)
{
    m_Signature = value;
}
std::vector<org::openapitools::server::model::StatElement> StatOperation::getValues() const
{
    return m_Values;
}
void StatOperation::setValues(std::vector<org::openapitools::server::model::StatElement> const& value)
{
    m_Values = value;
}


} // namespace org::openapitools::server::model

