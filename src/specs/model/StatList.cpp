/**
* Simple API
* A simple API to demonstrate OpenAPI to C++ stub generation.
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "StatList.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

StatList::StatList()
{
    
}

void StatList::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool StatList::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool StatList::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "StatList" : pathPrefix;

        
    if (!m_Page.validate(msg, _pathPrefix + ".page")) {
        msg << _pathPrefix << ": Page is invalid;";
        success = false;
    }     
    
    /* List */ {
        const std::vector<org::openapitools::server::model::Stats>& value = m_List;
        const std::string currentValuePath = _pathPrefix + ".list";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::Stats& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".list") && success;
 
                i++;
            }
        }

    }
    
    return success;
}

bool StatList::operator==(const StatList& rhs) const
{
    return
    
    
    (getPage() == rhs.getPage())
     &&
    
    (getList() == rhs.getList())
    
    
    ;
}

bool StatList::operator!=(const StatList& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const StatList& o)
{
    j = nlohmann::json::object();
    j["page"] = o.m_Page;
    j["list"] = o.m_List;
    
}

void from_json(const nlohmann::json& j, StatList& o)
{
    j.at("page").get_to(o.m_Page);
    j.at("list").get_to(o.m_List);
    
}

org::openapitools::server::model::ListCommon StatList::getPage() const
{
    return m_Page;
}
void StatList::setPage(org::openapitools::server::model::ListCommon const& value)
{
    m_Page = value;
}
std::vector<org::openapitools::server::model::Stats> StatList::getList() const
{
    return m_List;
}
void StatList::setList(std::vector<org::openapitools::server::model::Stats> const& value)
{
    m_List = value;
}


} // namespace org::openapitools::server::model

