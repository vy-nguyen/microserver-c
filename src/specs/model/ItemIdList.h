/**
* Simple API
* A simple API to demonstrate OpenAPI to C++ stub generation.
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * ItemIdList.h
 *
 * 
 */

#ifndef ItemIdList_H_
#define ItemIdList_H_


#include "ItemId.h"
#include <string>
#include <vector>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  ItemIdList
{
public:
    ItemIdList();
    virtual ~ItemIdList() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const ItemIdList& rhs) const;
    bool operator!=(const ItemIdList& rhs) const;

    /////////////////////////////////////////////
    /// ItemIdList members

    /// <summary>
    /// 
    /// </summary>
    std::string getOp() const;
    void setOp(std::string const& value);
    bool opIsSet() const;
    void unsetOp();
    /// <summary>
    /// 
    /// </summary>
    std::string getRegCode() const;
    void setRegCode(std::string const& value);
    bool regCodeIsSet() const;
    void unsetRegCode();
    /// <summary>
    /// 
    /// </summary>
    std::string getParentUuid() const;
    void setParentUuid(std::string const& value);
    bool parentUuidIsSet() const;
    void unsetParentUuid();
    /// <summary>
    /// 
    /// </summary>
    std::string getOpUuid() const;
    void setOpUuid(std::string const& value);
    bool opUuidIsSet() const;
    void unsetOpUuid();
    /// <summary>
    /// 
    /// </summary>
    std::string getOpKind() const;
    void setOpKind(std::string const& value);
    bool opKindIsSet() const;
    void unsetOpKind();
    /// <summary>
    /// 
    /// </summary>
    int64_t getOpSeq() const;
    void setOpSeq(int64_t const value);
    bool opSeqIsSet() const;
    void unsetOpSeq();
    /// <summary>
    /// 
    /// </summary>
    int32_t getOpPage() const;
    void setOpPage(int32_t const value);
    bool opPageIsSet() const;
    void unsetOpPage();
    /// <summary>
    /// 
    /// </summary>
    std::vector<org::openapitools::server::model::ItemId> getRecords() const;
    void setRecords(std::vector<org::openapitools::server::model::ItemId> const& value);
    bool recordsIsSet() const;
    void unsetRecords();
    /// <summary>
    /// 
    /// </summary>
    std::vector<org::openapitools::server::model::ItemId> getFilter() const;
    void setFilter(std::vector<org::openapitools::server::model::ItemId> const& value);
    bool filterIsSet() const;
    void unsetFilter();

    friend  void to_json(nlohmann::json& j, const ItemIdList& o);
    friend  void from_json(const nlohmann::json& j, ItemIdList& o);
protected:
    std::string m_Op;
    bool m_OpIsSet;
    std::string m_RegCode;
    bool m_RegCodeIsSet;
    std::string m_ParentUuid;
    bool m_ParentUuidIsSet;
    std::string m_OpUuid;
    bool m_OpUuidIsSet;
    std::string m_OpKind;
    bool m_OpKindIsSet;
    int64_t m_OpSeq;
    bool m_OpSeqIsSet;
    int32_t m_OpPage;
    bool m_OpPageIsSet;
    std::vector<org::openapitools::server::model::ItemId> m_Records;
    bool m_RecordsIsSet;
    std::vector<org::openapitools::server::model::ItemId> m_Filter;
    bool m_FilterIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* ItemIdList_H_ */
