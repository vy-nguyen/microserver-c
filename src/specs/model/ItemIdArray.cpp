/**
* Simple API
* A simple API to demonstrate OpenAPI to C++ stub generation.
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ItemIdArray.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

ItemIdArray::ItemIdArray()
{
    
}

void ItemIdArray::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool ItemIdArray::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool ItemIdArray::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "ItemIdArray" : pathPrefix;

        
    if (!m_ItemKey.validate(msg, _pathPrefix + ".itemKey")) {
        msg << _pathPrefix << ": ItemKey is invalid;";
        success = false;
    }     
    
    /* ItemIds */ {
        const std::vector<org::openapitools::server::model::ItemId>& value = m_ItemIds;
        const std::string currentValuePath = _pathPrefix + ".itemIds";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::ItemId& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".itemIds") && success;
 
                i++;
            }
        }

    }
    
    return success;
}

bool ItemIdArray::operator==(const ItemIdArray& rhs) const
{
    return
    
    
    (getItemKey() == rhs.getItemKey())
     &&
    
    (getItemIds() == rhs.getItemIds())
    
    
    ;
}

bool ItemIdArray::operator!=(const ItemIdArray& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const ItemIdArray& o)
{
    j = nlohmann::json::object();
    j["itemKey"] = o.m_ItemKey;
    j["itemIds"] = o.m_ItemIds;
    
}

void from_json(const nlohmann::json& j, ItemIdArray& o)
{
    j.at("itemKey").get_to(o.m_ItemKey);
    j.at("itemIds").get_to(o.m_ItemIds);
    
}

org::openapitools::server::model::ItemKey ItemIdArray::getItemKey() const
{
    return m_ItemKey;
}
void ItemIdArray::setItemKey(org::openapitools::server::model::ItemKey const& value)
{
    m_ItemKey = value;
}
std::vector<org::openapitools::server::model::ItemId> ItemIdArray::getItemIds() const
{
    return m_ItemIds;
}
void ItemIdArray::setItemIds(std::vector<org::openapitools::server::model::ItemId> const& value)
{
    m_ItemIds = value;
}


} // namespace org::openapitools::server::model

