/**
* Simple API
* A simple API to demonstrate OpenAPI to C++ stub generation.
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * StatElement.h
 *
 * 
 */

#ifndef StatElement_H_
#define StatElement_H_


#include "ItemId.h"
#include "Counter.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  StatElement
{
public:
    StatElement();
    virtual ~StatElement() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const StatElement& rhs) const;
    bool operator!=(const StatElement& rhs) const;

    /////////////////////////////////////////////
    /// StatElement members

    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::ItemId getItemId() const;
    void setItemId(org::openapitools::server::model::ItemId const& value);
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::ItemId getPeerId() const;
    void setPeerId(org::openapitools::server::model::ItemId const& value);
    bool peerIdIsSet() const;
    void unsetPeerId();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::Counter getCounter() const;
    void setCounter(org::openapitools::server::model::Counter const& value);
    bool counterIsSet() const;
    void unsetCounter();

    friend  void to_json(nlohmann::json& j, const StatElement& o);
    friend  void from_json(const nlohmann::json& j, StatElement& o);
protected:
    org::openapitools::server::model::ItemId m_ItemId;

    org::openapitools::server::model::ItemId m_PeerId;
    bool m_PeerIdIsSet;
    org::openapitools::server::model::Counter m_Counter;
    bool m_CounterIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* StatElement_H_ */
