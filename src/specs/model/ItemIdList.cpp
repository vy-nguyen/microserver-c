/**
* Simple API
* A simple API to demonstrate OpenAPI to C++ stub generation.
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ItemIdList.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

ItemIdList::ItemIdList()
{
    m_Op = "";
    m_OpIsSet = false;
    m_RegCode = "";
    m_RegCodeIsSet = false;
    m_ParentUuid = "";
    m_ParentUuidIsSet = false;
    m_OpUuid = "";
    m_OpUuidIsSet = false;
    m_OpKind = "";
    m_OpKindIsSet = false;
    m_OpSeq = 0L;
    m_OpSeqIsSet = false;
    m_OpPage = 0;
    m_OpPageIsSet = false;
    m_RecordsIsSet = false;
    m_FilterIsSet = false;
    
}

void ItemIdList::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool ItemIdList::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool ItemIdList::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "ItemIdList" : pathPrefix;

                                     
    if (recordsIsSet())
    {
        const std::vector<org::openapitools::server::model::ItemId>& value = m_Records;
        const std::string currentValuePath = _pathPrefix + ".records";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::ItemId& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".records") && success;
 
                i++;
            }
        }

    }
         
    if (filterIsSet())
    {
        const std::vector<org::openapitools::server::model::ItemId>& value = m_Filter;
        const std::string currentValuePath = _pathPrefix + ".filter";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::ItemId& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".filter") && success;
 
                i++;
            }
        }

    }
    
    return success;
}

bool ItemIdList::operator==(const ItemIdList& rhs) const
{
    return
    
    
    
    ((!opIsSet() && !rhs.opIsSet()) || (opIsSet() && rhs.opIsSet() && getOp() == rhs.getOp())) &&
    
    
    ((!regCodeIsSet() && !rhs.regCodeIsSet()) || (regCodeIsSet() && rhs.regCodeIsSet() && getRegCode() == rhs.getRegCode())) &&
    
    
    ((!parentUuidIsSet() && !rhs.parentUuidIsSet()) || (parentUuidIsSet() && rhs.parentUuidIsSet() && getParentUuid() == rhs.getParentUuid())) &&
    
    
    ((!opUuidIsSet() && !rhs.opUuidIsSet()) || (opUuidIsSet() && rhs.opUuidIsSet() && getOpUuid() == rhs.getOpUuid())) &&
    
    
    ((!opKindIsSet() && !rhs.opKindIsSet()) || (opKindIsSet() && rhs.opKindIsSet() && getOpKind() == rhs.getOpKind())) &&
    
    
    ((!opSeqIsSet() && !rhs.opSeqIsSet()) || (opSeqIsSet() && rhs.opSeqIsSet() && getOpSeq() == rhs.getOpSeq())) &&
    
    
    ((!opPageIsSet() && !rhs.opPageIsSet()) || (opPageIsSet() && rhs.opPageIsSet() && getOpPage() == rhs.getOpPage())) &&
    
    
    ((!recordsIsSet() && !rhs.recordsIsSet()) || (recordsIsSet() && rhs.recordsIsSet() && getRecords() == rhs.getRecords())) &&
    
    
    ((!filterIsSet() && !rhs.filterIsSet()) || (filterIsSet() && rhs.filterIsSet() && getFilter() == rhs.getFilter()))
    
    ;
}

bool ItemIdList::operator!=(const ItemIdList& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const ItemIdList& o)
{
    j = nlohmann::json::object();
    if(o.opIsSet())
        j["op"] = o.m_Op;
    if(o.regCodeIsSet())
        j["regCode"] = o.m_RegCode;
    if(o.parentUuidIsSet())
        j["parentUuid"] = o.m_ParentUuid;
    if(o.opUuidIsSet())
        j["opUuid"] = o.m_OpUuid;
    if(o.opKindIsSet())
        j["opKind"] = o.m_OpKind;
    if(o.opSeqIsSet())
        j["opSeq"] = o.m_OpSeq;
    if(o.opPageIsSet())
        j["opPage"] = o.m_OpPage;
    if(o.recordsIsSet() || !o.m_Records.empty())
        j["records"] = o.m_Records;
    if(o.filterIsSet() || !o.m_Filter.empty())
        j["filter"] = o.m_Filter;
    
}

void from_json(const nlohmann::json& j, ItemIdList& o)
{
    if(j.find("op") != j.end())
    {
        j.at("op").get_to(o.m_Op);
        o.m_OpIsSet = true;
    } 
    if(j.find("regCode") != j.end())
    {
        j.at("regCode").get_to(o.m_RegCode);
        o.m_RegCodeIsSet = true;
    } 
    if(j.find("parentUuid") != j.end())
    {
        j.at("parentUuid").get_to(o.m_ParentUuid);
        o.m_ParentUuidIsSet = true;
    } 
    if(j.find("opUuid") != j.end())
    {
        j.at("opUuid").get_to(o.m_OpUuid);
        o.m_OpUuidIsSet = true;
    } 
    if(j.find("opKind") != j.end())
    {
        j.at("opKind").get_to(o.m_OpKind);
        o.m_OpKindIsSet = true;
    } 
    if(j.find("opSeq") != j.end())
    {
        j.at("opSeq").get_to(o.m_OpSeq);
        o.m_OpSeqIsSet = true;
    } 
    if(j.find("opPage") != j.end())
    {
        j.at("opPage").get_to(o.m_OpPage);
        o.m_OpPageIsSet = true;
    } 
    if(j.find("records") != j.end())
    {
        j.at("records").get_to(o.m_Records);
        o.m_RecordsIsSet = true;
    } 
    if(j.find("filter") != j.end())
    {
        j.at("filter").get_to(o.m_Filter);
        o.m_FilterIsSet = true;
    } 
    
}

std::string ItemIdList::getOp() const
{
    return m_Op;
}
void ItemIdList::setOp(std::string const& value)
{
    m_Op = value;
    m_OpIsSet = true;
}
bool ItemIdList::opIsSet() const
{
    return m_OpIsSet;
}
void ItemIdList::unsetOp()
{
    m_OpIsSet = false;
}
std::string ItemIdList::getRegCode() const
{
    return m_RegCode;
}
void ItemIdList::setRegCode(std::string const& value)
{
    m_RegCode = value;
    m_RegCodeIsSet = true;
}
bool ItemIdList::regCodeIsSet() const
{
    return m_RegCodeIsSet;
}
void ItemIdList::unsetRegCode()
{
    m_RegCodeIsSet = false;
}
std::string ItemIdList::getParentUuid() const
{
    return m_ParentUuid;
}
void ItemIdList::setParentUuid(std::string const& value)
{
    m_ParentUuid = value;
    m_ParentUuidIsSet = true;
}
bool ItemIdList::parentUuidIsSet() const
{
    return m_ParentUuidIsSet;
}
void ItemIdList::unsetParentUuid()
{
    m_ParentUuidIsSet = false;
}
std::string ItemIdList::getOpUuid() const
{
    return m_OpUuid;
}
void ItemIdList::setOpUuid(std::string const& value)
{
    m_OpUuid = value;
    m_OpUuidIsSet = true;
}
bool ItemIdList::opUuidIsSet() const
{
    return m_OpUuidIsSet;
}
void ItemIdList::unsetOpUuid()
{
    m_OpUuidIsSet = false;
}
std::string ItemIdList::getOpKind() const
{
    return m_OpKind;
}
void ItemIdList::setOpKind(std::string const& value)
{
    m_OpKind = value;
    m_OpKindIsSet = true;
}
bool ItemIdList::opKindIsSet() const
{
    return m_OpKindIsSet;
}
void ItemIdList::unsetOpKind()
{
    m_OpKindIsSet = false;
}
int64_t ItemIdList::getOpSeq() const
{
    return m_OpSeq;
}
void ItemIdList::setOpSeq(int64_t const value)
{
    m_OpSeq = value;
    m_OpSeqIsSet = true;
}
bool ItemIdList::opSeqIsSet() const
{
    return m_OpSeqIsSet;
}
void ItemIdList::unsetOpSeq()
{
    m_OpSeqIsSet = false;
}
int32_t ItemIdList::getOpPage() const
{
    return m_OpPage;
}
void ItemIdList::setOpPage(int32_t const value)
{
    m_OpPage = value;
    m_OpPageIsSet = true;
}
bool ItemIdList::opPageIsSet() const
{
    return m_OpPageIsSet;
}
void ItemIdList::unsetOpPage()
{
    m_OpPageIsSet = false;
}
std::vector<org::openapitools::server::model::ItemId> ItemIdList::getRecords() const
{
    return m_Records;
}
void ItemIdList::setRecords(std::vector<org::openapitools::server::model::ItemId> const& value)
{
    m_Records = value;
    m_RecordsIsSet = true;
}
bool ItemIdList::recordsIsSet() const
{
    return m_RecordsIsSet;
}
void ItemIdList::unsetRecords()
{
    m_RecordsIsSet = false;
}
std::vector<org::openapitools::server::model::ItemId> ItemIdList::getFilter() const
{
    return m_Filter;
}
void ItemIdList::setFilter(std::vector<org::openapitools::server::model::ItemId> const& value)
{
    m_Filter = value;
    m_FilterIsSet = true;
}
bool ItemIdList::filterIsSet() const
{
    return m_FilterIsSet;
}
void ItemIdList::unsetFilter()
{
    m_FilterIsSet = false;
}


} // namespace org::openapitools::server::model

