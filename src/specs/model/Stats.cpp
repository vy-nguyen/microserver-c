/**
* Simple API
* A simple API to demonstrate OpenAPI to C++ stub generation.
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "Stats.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

Stats::Stats()
{
    m_Likes = 0;
    m_LikesIsSet = false;
    m_Bookmark = 0;
    m_BookmarkIsSet = false;
    m_Shares = 0;
    m_SharesIsSet = false;
    m_ExtrasIsSet = false;
    
}

void Stats::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool Stats::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool Stats::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "Stats" : pathPrefix;

        
    if (!m_ItemId.validate(msg, _pathPrefix + ".itemId")) {
        msg << _pathPrefix << ": ItemId is invalid;";
        success = false;
    }                 
    if (extrasIsSet())
    {
        const std::vector<org::openapitools::server::model::Counter>& value = m_Extras;
        const std::string currentValuePath = _pathPrefix + ".extras";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::Counter& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".extras") && success;
 
                i++;
            }
        }

    }
    
    return success;
}

bool Stats::operator==(const Stats& rhs) const
{
    return
    
    
    (getItemId() == rhs.getItemId())
     &&
    
    
    ((!likesIsSet() && !rhs.likesIsSet()) || (likesIsSet() && rhs.likesIsSet() && getLikes() == rhs.getLikes())) &&
    
    
    ((!bookmarkIsSet() && !rhs.bookmarkIsSet()) || (bookmarkIsSet() && rhs.bookmarkIsSet() && getBookmark() == rhs.getBookmark())) &&
    
    
    ((!sharesIsSet() && !rhs.sharesIsSet()) || (sharesIsSet() && rhs.sharesIsSet() && getShares() == rhs.getShares())) &&
    
    
    ((!extrasIsSet() && !rhs.extrasIsSet()) || (extrasIsSet() && rhs.extrasIsSet() && getExtras() == rhs.getExtras()))
    
    ;
}

bool Stats::operator!=(const Stats& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const Stats& o)
{
    j = nlohmann::json::object();
    j["itemId"] = o.m_ItemId;
    if(o.likesIsSet())
        j["likes"] = o.m_Likes;
    if(o.bookmarkIsSet())
        j["bookmark"] = o.m_Bookmark;
    if(o.sharesIsSet())
        j["shares"] = o.m_Shares;
    if(o.extrasIsSet() || !o.m_Extras.empty())
        j["extras"] = o.m_Extras;
    
}

void from_json(const nlohmann::json& j, Stats& o)
{
    j.at("itemId").get_to(o.m_ItemId);
    if(j.find("likes") != j.end())
    {
        j.at("likes").get_to(o.m_Likes);
        o.m_LikesIsSet = true;
    } 
    if(j.find("bookmark") != j.end())
    {
        j.at("bookmark").get_to(o.m_Bookmark);
        o.m_BookmarkIsSet = true;
    } 
    if(j.find("shares") != j.end())
    {
        j.at("shares").get_to(o.m_Shares);
        o.m_SharesIsSet = true;
    } 
    if(j.find("extras") != j.end())
    {
        j.at("extras").get_to(o.m_Extras);
        o.m_ExtrasIsSet = true;
    } 
    
}

org::openapitools::server::model::ItemId Stats::getItemId() const
{
    return m_ItemId;
}
void Stats::setItemId(org::openapitools::server::model::ItemId const& value)
{
    m_ItemId = value;
}
int32_t Stats::getLikes() const
{
    return m_Likes;
}
void Stats::setLikes(int32_t const value)
{
    m_Likes = value;
    m_LikesIsSet = true;
}
bool Stats::likesIsSet() const
{
    return m_LikesIsSet;
}
void Stats::unsetLikes()
{
    m_LikesIsSet = false;
}
int32_t Stats::getBookmark() const
{
    return m_Bookmark;
}
void Stats::setBookmark(int32_t const value)
{
    m_Bookmark = value;
    m_BookmarkIsSet = true;
}
bool Stats::bookmarkIsSet() const
{
    return m_BookmarkIsSet;
}
void Stats::unsetBookmark()
{
    m_BookmarkIsSet = false;
}
int32_t Stats::getShares() const
{
    return m_Shares;
}
void Stats::setShares(int32_t const value)
{
    m_Shares = value;
    m_SharesIsSet = true;
}
bool Stats::sharesIsSet() const
{
    return m_SharesIsSet;
}
void Stats::unsetShares()
{
    m_SharesIsSet = false;
}
std::vector<org::openapitools::server::model::Counter> Stats::getExtras() const
{
    return m_Extras;
}
void Stats::setExtras(std::vector<org::openapitools::server::model::Counter> const& value)
{
    m_Extras = value;
    m_ExtrasIsSet = true;
}
bool Stats::extrasIsSet() const
{
    return m_ExtrasIsSet;
}
void Stats::unsetExtras()
{
    m_ExtrasIsSet = false;
}


} // namespace org::openapitools::server::model

